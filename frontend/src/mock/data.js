// Mock data for PATCH platform

export const mockUser = {
  id: "user_001",
  username: "student123",
  email: "student@example.com",
  firstName: "Alex",
  lastName: "Chen",
  progress: 65,
  level: "Intermediate",
  joinDate: "2024-01-15",
  completedModules: 8,
  totalModules: 12,
};

export const mockWalkthroughs = [
  {
    id: "wt_001",
    title: "SQL Injection Fundamentals",
    description: "Learn to identify and prevent SQL injection attacks through hands-on exercises.",
    difficulty: "Beginner",
    duration: "45 minutes",
    completed: true,
    progress: 100,
    topics: ["SQL", "Input Validation", "Database Security"],
    vulnerabilities: ["SQL Injection", "Blind SQL Injection"],
    exercises: 5,
  },
  {
    id: "wt_002",
    title: "Cross-Site Scripting (XSS) Defense",
    description: "Understand XSS vulnerabilities and implement proper input sanitization.",
    difficulty: "Beginner",
    duration: "60 minutes",
    completed: true,
    progress: 100,
    topics: ["JavaScript", "HTML", "Input Sanitization"],
    vulnerabilities: ["Reflected XSS", "Stored XSS", "DOM XSS"],
    exercises: 7,
  },
  {
    id: "wt_003",
    title: "Authentication Bypass Techniques",
    description: "Explore common authentication flaws and secure implementation practices.",
    difficulty: "Intermediate",
    duration: "75 minutes",
    completed: false,
    progress: 40,
    topics: ["Authentication", "Session Management", "Access Control"],
    vulnerabilities: ["Broken Authentication", "Session Fixation"],
    exercises: 6,
  },
  {
    id: "wt_004",
    title: "File Upload Security",
    description: "Master secure file upload mechanisms and prevent malicious file execution.",
    difficulty: "Intermediate",
    duration: "90 minutes",
    completed: false,
    progress: 0,
    topics: ["File Handling", "MIME Types", "Path Traversal"],
    vulnerabilities: ["Unrestricted File Upload", "Path Traversal"],
    exercises: 8,
  },
  {
    id: "wt_005",
    title: "API Security Best Practices",
    description: "Implement robust API security measures and understand common API vulnerabilities.",
    difficulty: "Advanced",
    duration: "120 minutes",
    completed: false,
    progress: 0,
    topics: ["REST APIs", "Rate Limiting", "API Authentication"],
    vulnerabilities: ["Broken Object Level Authorization", "API Rate Limiting"],
    exercises: 10,
  },
  {
    id: "wt_006",
    title: "Insecure User Registration",
    description: "Examine common registration vulnerabilities and learn secure implementation practices.",
    difficulty: "Beginner",
    duration: "50 minutes",
    completed: false,
    progress: 0,
    topics: ["Authentication", "Password Security", "Input Validation"],
    vulnerabilities: ["Weak password policy", "No email verification", "Passwords stored in plaintext", "No input validation", "Susceptible to user enumeration"],
    exercises: 6,
  },
];

export const mockJournalEntries = [
  {
    id: "journal_001",
    moduleId: "wt_001",
    moduleTitle: "SQL Injection Fundamentals",
    date: "2024-09-15",
    reflections: "Today I learned about SQL injection attacks and how they exploit poorly sanitized user input. The most important takeaway was understanding parameterized queries as the primary defense mechanism. I practiced with several examples and now feel confident identifying potential injection points in web applications.",
    keyLearnings: [
      "Always use parameterized queries or prepared statements",
      "Input validation alone is not sufficient - output encoding is crucial",
      "SQL injection can occur in any part of a query, not just WHERE clauses",
    ],
    challenges: "Initially struggled with understanding how UNION-based attacks work, but the interactive examples helped clarify the concept.",
    nextSteps: "Practice more complex injection scenarios and learn about NoSQL injection attacks.",
  },
  {
    id: "journal_002",
    moduleId: "wt_002",
    moduleTitle: "Cross-Site Scripting (XSS) Defense",
    date: "2024-09-20",
    reflections: "XSS vulnerabilities are more nuanced than I initially thought. The distinction between reflected, stored, and DOM-based XSS is crucial for implementing appropriate defenses. The hands-on exercises really helped me understand how malicious scripts can be injected and executed.",
    keyLearnings: [
      "Context-aware output encoding is essential",
      "Content Security Policy (CSP) provides an additional layer of defense",
      "DOM-based XSS requires client-side validation and sanitization",
    ],
    challenges: "Understanding DOM manipulation and how JavaScript can be exploited required more time and practice.",
    nextSteps: "Dive deeper into CSP implementation and advanced XSS bypass techniques.",
  },
  {
    id: "journal_003",
    moduleId: "wt_003",
    moduleTitle: "Authentication Bypass Techniques",
    date: "2024-09-25",
    reflections: "This module opened my eyes to how many ways authentication can be compromised. Session management is particularly complex, and I now understand why proper implementation is so critical for application security.",
    keyLearnings: [
      "Multi-factor authentication significantly improves security posture",
      "Session tokens must be properly randomized and protected",
      "Account lockout policies need to balance security with usability",
    ],
    challenges: "Still working through this module - the session fixation concepts are challenging to grasp fully.",
    nextSteps: "Complete the remaining exercises and research modern authentication frameworks.",
  },
];

export const mockAdminData = {
  totalUsers: 1247,
  activeUsers: 892,
  completedModules: 3421,
  averageProgress: 73,
  recentActivity: [
    { user: "student123", action: "Completed SQL Injection module", time: "2 hours ago" },
    { user: "learner456", action: "Started XSS Defense walkthrough", time: "4 hours ago" },
    { user: "hacker789", action: "Submitted journal entry", time: "6 hours ago" },
    { user: "security101", action: "Registered new account", time: "8 hours ago" },
  ],
  systemStatus: {
    database: "Online",
    api: "Online",
    fileSystem: "Online",
    backup: "Completed 2 hours ago",
  },
};
